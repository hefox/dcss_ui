<?php

/**
 * Implementation of hook_form_system_theme_settings_alter().
 */
function dcss_ui_form_system_theme_settings_alter(&$form, $form_state) {
  // Why isn't this stored elsewhere? ew ew ew
  $var = $form['#parameters'][2];
  $settings = theme_get_settings($var);
  if (empty($settings['dcss_ui'])) {
    return;
  }
  $form['dcss'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#title' => 'Dynamic CSS overrides',
    '#collapsible' => true,
    '#weight' => -1,
    //'#collapsed' => true,
  );
  dcss_ui_build_elements($form['dcss'], $settings['dcss_ui'], $settings['dcss']);
}

/**
 * Goes through each element in an array, dealing with it.
 */
function dcss_ui_build_elements(&$parent, $settings, $values) {
  foreach($values as $var => $value) {
    $info = $settings[$var];
    if (!isset($info)) {
      // If no Dcss ui settings, store the dcss variable so it's kept on save
      $parent[$var] = array(
        '#type' => 'value',
        '#value' => $value,
      );
    }
    else {
      $info['title'] = (!empty($info['title']) ? check_plain($info['title']) : check_plain($var));

      if (!empty($info['below'])) {
        $parent[$var] = array(
          '#type' => ($info['type'] == 'group'?'fieldset':NULL),
          '#title' => $info['title'],
          '#collapsible' => true,
          '#collapsed' => true,
        );
        dcss_ui_build_elements($parent[$var], $info['below'], $value);
      } else {
        dcss_ui_build_element($parent, $var, $info, $value);
      }
    }
  }
}

/**
 * Build form element based on info
 */
function dcss_ui_build_element(&$parent, $var, $info, $value) {
  if ($info['suffix']) {
    $value = str_replace($info['suffix'], '', $value);
  }

  switch($info['type']){
    case 'slider':
      if (module_exists('slider_textfield')) {
        $info['slider_settings'] += array(
          'min' => 1,
          'max' => 400,
        );
        if (!$info['slider_settings']['width']) {
           $info['slider_settings']['width'] = $info['slider_settings']['max'] - $info['slider_settings']['min'];
        }
        $parent[$var] = array(
          '#type' => 'slider_textfield',
         	'#title' => $info['title'],
         	'#default_value' => $value,
          '#slider_settings' =>  $info['slider_settings'],
        );
  
        break;
      }
    case 'numeric':
      $parent[$var] = array(
        '#type' => 'textfield',
       	'#title' =>$info['title'],
       	'#default_value' => $value,
       	'#size' => 10,
      ); 
      break ;
    case 'imagecache':
      if (empty($preset_options)) {
        $preset_options = array(''=>'None');
        foreach (imagecache_presets() as $pid => $preset) {
          $preset_options[$preset['presetname']] = $preset['presetname'];
        }
      }
      $parent[$var] = array(
        '#type' => 'select',
        '#options' => $preset_options,
       	'#title' =>$info['title'],
       	'#default_value' => $value,
      );
    break;
    case 'color':
      $parent[$var]['color'] = array(
        '#type' => (module_exists('colorpicker') ? 'colorpicker_' : '') . 'textfield',
       	'#title' => $info['title'],
       	'#default_value' => (!empty($value)? $value : '#000000'),
      );
      $parent[$var]['none'] = array(
        '#type' => 'checkbox',
       	'#title' => t('Ignore'),
       	'#default_value' => (empty($value) ? TRUE : FALSE),
      );
      $parent[$var]['#element_validate'] = array(
        'dcss_ui_noneify_color',
      );
    break;
    case 'option':
      if (!isset($option_types)) {
        $option_types = module_invoke_all('dcss_option_types');
        drupal_alter('dcss_option_types', $option_types);
      }
      // set option_type to var if not supplied
      if (empty($info['option_type'])) {
        $info['option_type'] = $var;
      }
      $parent[$var] = array(
        '#type' => 'radios',
       	'#title' => $info['title'],
       	'#default_value' => (!empty($value)?$value: ''),
       	'#options' => $option_types[$info['option_type']],
      );
    break;
    case 'boolean':
      $parent[$var] = array(
        '#type' => 'checkbox',
       	'#title' => $info['title'],
       	'#default_value' => $value,
      );
    break;
  }
  if (!$parent[$var]) {
    return;
  }
  $parent[$var] += array(
    '#dcss_info' => $info,
    '#element_validate' => array(
    ),
  );
  if ($info['suffix']) {
    $parent[$var]['#element_validate'][] = 'dcss_ui_add_suffix';
  }
}

/*
 * Element validator that adds px
 */
function dcss_ui_add_suffix($element, &$form_values) {
  form_set_value($element, $element['#value'] . $element['#dcss_info']['suffix'], $form_values);
}
/*
 * Element validator that adds px
 */
function dcss_ui_noneify_color($element, &$form_values) {
  if ($element['none']['#value']) {
    $value = 0;
  }
  else {
    $value =  $element['color']['#value'];
  }
  form_set_value($element, $value, $form_values);
}


/**
 * Implementation of hook_dcss_option_types().
 */
function dcss_ui_dcss_option_types() {
  return array(
    'border' => array(
      'none' => 'None',
      'solid' => 'Solid',
      'dotted' => 'Dotted',
      'dashed' => 'Dashed',
      'Double' => 'Double',
      'groove' => 'Groove',
      'ridge' => 'Ridge',
      'inset' => 'Inset',
      'outset' => 'Outset',
      'inherit' => 'Inherit',
    ),
    'font_family' => drupal_map_assoc(array(
      '"Times New Roman", Times, Georgia, "DejaVu Serif", serif',
      'Times, "Times New Roman", Georgia, "DejaVu Serif", serif',
      'Georgia, "Times New Roman", "DejaVu Serif", serif',
      'Verdana, Tahoma, "DejaVu Sans", sans-serif',
      'Tahoma, Verdana, "DejaVu Sans", sans-serif',
      'Helvetica, Arial, "Nimbus Sans L", sans-serif',
      'Arial, Helvetica, "Nimbus Sans L", sans-serif',
      '"Courier New", "DejaVu Sans Mono", monospace',
    )),
    'text_decoration' => array('' => t('Ignore')) + drupal_map_assoc(array(
      'none',
      'underline',
      'overline',
      'line-through',
      'blink',
      'inherit',
    )  
    ),
  );
}

/**
 * Implementation of hook_theme().
 */
function dcss_ui_theme() {
  return array(
    'dcss_css' => array(
      'arguments' => array('css' => array()),
    ),
  );
}

/**
 * Formats css based on array
 */
function theme_dcss_css($css) {
  // defaults
  $css += array(
    'prepend_selector' => '',
    'comment' => '',
    'prepend_selector_spacer' => ' ',
  );
  
  // add comments to css file
  $output = "\n";
  if (!empty($css['comment'])) {
    if (!is_array($css['comment'])) {
      $css['comment'] = array($css['comment']);
    }
    $output .= "\n/**\n * " .  implode("\n * ", $css['comment']) . "\n */\n";
  }
  
  // if a prepend selector, add a space to end of it
  if (!empty($css['prepend_selector'])) {
     $css['prepend_selector']  .= $css['prepend_selector_spacer'] ;
  }
  // output selectors
  $glue = ",\n" . $css['prepend_selector'];
  if (is_array($css['selectors'])) {
    $output .= $css['prepend_selector'] ;
    $output .= implode($glue, $css['selectors']);
  }
  else {
    $output .= $css['prepend_selector'] . $css['selector'];
  }
  $output .= " { \n";
  
  // output property and values
  foreach ($css['styles'] as $property => $value) {
    if (!is_numeric($property)) {
      $value =  $property . ': ' . $value;
    }
    $output .= '  ' . $value . ";\n";
  }
  $output .= "}\n\n";
  return $output; 
}


