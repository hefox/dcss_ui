<?php

/**
 * Implementation of hook_form_system_theme_settings_alter().
 */
function dcss_ui_form_system_theme_settings_alter(&$form, $form_state) {
  // Why isn't this stored elsewhere? ew ew ew
  $var = $form['#parameters'][2];
  $settings = theme_get_settings($var);
  if (empty($settings['dcss_ui'])) {
    return;
  }
  $form['dcss'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#title' => 'Dynamic CSS overrides',
    '#collapsible' => true,
    '#weight' => -1,
    //'#collapsed' => true,
  );
  dcss_ui_build_elements($form['dcss'], $settings['dcss_ui'], $settings['dcss']);
}

/**
 * Goes through each element in an array, dealing with it.
 */
function dcss_ui_build_elements(&$parent, $settings, $values) {
  foreach($settings as $var => $info) {    
    $info['title'] = (!empty($info['title']) ? check_plain($info['title']) : check_plain($var));
    if (!empty($info['below'])) {
      $parent[$var] = array(
        '#type' => ($info['type'] == 'group'?'fieldset':NULL),
        '#title' => $info['title'],
        '#collapsible' => true,
        '#collapsed' => true,
      );
      dcss_ui_build_elements($parent[$var], $info['below'], $values[$var]);
    } else {
      dcss_ui_build_element($parent, $var, $info, $values[$var]);
    }
  }
}

/**
 * Build form element based on info
 */
function dcss_ui_build_element(&$parent, $var, $info, $value) {
  if ($info['suffix']) {
    $value = str_replace($info['suffix'], '', $value);
  }

  switch($info['type']){
    case 'slider':
      if (module_exists('slider_textfield')) {
        $info['slider_settings'] += array(
          'min' => 1,
          'max' => 400,
        );
        if (!$info['slider_settings']['width']) {
           $info['slider_settings']['width'] = $info['slider_settings']['max'] - $info['slider_settings']['min'];
        }
        $parent[$var] = array(
          '#type' => 'slider_textfield',
         	'#title' => $info['title'],
         	'#default_value' => $value,
          '#slider_settings' =>  $info['slider_settings'],
        );
  
        break;
      }
    case 'numeric':
      $parent[$var] = array(
        '#type' => 'textfield',
       	'#title' =>$info['title'],
       	'#default_value' => $value,
       	'#size' => 10,
      ); 
      break ;
    case 'imagecache':
      if (empty($preset_options)) {
        $preset_options = array(''=>'None');
        foreach (imagecache_presets() as $pid => $preset) {
          $preset_options[$preset['presetname']] = $preset['presetname'];
        }
      }
      $parent[$var] = array(
        '#type' => 'select',
        '#options' => $preset_options,
       	'#title' =>$info['title'],
       	'#default_value' => $value,
      );
    break;
    case 'color':
      $parent[$var]['color'] = array(
        '#type' => (module_exists('colorpicker') ? 'colorpicker_' : '') . 'textfield',
       	'#title' => $info['title'],
       	'#default_value' => ($value && $value != 'none'? $value : '#000000'),
      ); 
      $parent[$var]['none'] = array(
        '#type' => 'checkbox',
       	'#title' => t('Ignore'),
       	'#default_value' => ((empty($value) || $value == 'none')? TRUE : FALSE),
      );
      $parent[$var]['#element_validate'] = array(
        'dcss_ui_noneify_color',
      );
    break;
  }
  if (!$parent[$var]) {
    return;
  }
  $parent[$var] += array(
    '#dcss_info' => $info,
    '#element_validate' => array(
    ),
  );
  if ($info['suffix']) {
    $parent[$var]['#element_validate'][] = 'dcss_ui_add_suffix';
  }
}

/*
 * Element validator that adds px
 */
function dcss_ui_add_suffix($element, &$form_values) {
  form_set_value($element, $element['#value'] . $element['#dcss_info']['suffix'], $form_values);
}
/*
 * Element validator that adds px
 */
function dcss_ui_noneify_color($element, &$form_values) {
  if ($element['none']['#value']) {
    $value = 'none';
  }
  else {
    $value =  $element['color']['#value'];
  }
  form_set_value($element, $value, $form_values);
}
